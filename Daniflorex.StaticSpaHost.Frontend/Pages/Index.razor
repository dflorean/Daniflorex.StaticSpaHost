@page "/"
@implements IDisposable
@inject HttpClient Http
@inject StaticPreRenderedComponentState ComponentState

<PageTitle>Index</PageTitle>

@if (cmsData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@cmsData.fields.title</h1>

    @((MarkupString)cmsData.fields.text)
}

<SurveyPrompt Title="How is Blazor working for you?" />


@code {
    private Root? cmsData;

    private PersistingComponentStateSubscription persistingSubscription;

    private const string persistentStoreKey = "index";

    protected override async Task OnInitializedAsync()
    {
        //loading at page change from shared component appstat
        //if (!string.IsNullOrEmpty(AppState.CmsData))
        //{
        //    cmsData = JsonSerializer.Deserialize<Root?>(AppState.CmsData);
        //}

        Console.WriteLine($"Base address: {Http.BaseAddress}");

        //persisting state
        persistingSubscription =
            ComponentState.RegisterOnPersisting(PersistData);

        if (cmsData == null)
        {
            if (await ComponentState.TryTakeFromJsonAsync<Root?>(persistentStoreKey) is (true, var restored))
            {
                cmsData = restored!;
                Console.WriteLine($"Loaded from persisted component state");
            }
            else
            {
                cmsData = await Http.GetFromJsonAsync<Root>("https://staticspa-demo.azurewebsites.net/en/api/content/a88097c7-c966-48e9-9887-22b3f80440d6");
                Console.WriteLine($"Loaded from service");
            }
        }
        else
        {
            Console.WriteLine($"Loaded from cascading appstate");
        }
    }

    private Task PersistData()
    {
        Console.WriteLine($"Persisting data. {cmsData}");

        ComponentState.PersistAsJson(persistentStoreKey, cmsData);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}