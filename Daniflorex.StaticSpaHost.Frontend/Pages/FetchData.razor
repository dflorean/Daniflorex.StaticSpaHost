@page "/fetchdata"
@implements IDisposable
@inject HttpClient Http
@inject StaticPreRenderedComponentState ComponentState

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private PersistingComponentStateSubscription persistingSubscription;

    private const string persistentStoreKey = "fetchdata";

    protected override async Task OnInitializedAsync()
    {
        //loading at page change from shared component appstate
        //if (!string.IsNullOrEmpty(AppState.WeatherData))
        //{
        //    forecasts = JsonSerializer.Deserialize<WeatherForecast[]?>(AppState.WeatherData);
        //}

        //persisting state
        persistingSubscription =
            ComponentState.RegisterOnPersisting(PersistData);

        if (forecasts == null)
        {
            if (await ComponentState.TryTakeFromJsonAsync<WeatherForecast[]>(persistentStoreKey) is (true, var restored))
            {
                forecasts = restored!;
                Console.WriteLine($"Loaded from persisted component state");
            }
            else
            {
                forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:44384/api/weatherforecast");
                Console.WriteLine($"Loaded from service");
            }
        }
        else
        {
            Console.WriteLine($"Loaded from cascading appstate");
        }

        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:44384/api/weatherforecast");
    }

    //protected override bool ShouldRender()
    //{
    //    return fale;
    //}

    private Task PersistData()
    {
        ComponentState.PersistAsJson(persistentStoreKey, forecasts);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
